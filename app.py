# -*- coding: utf-8 -*-
"""unet_inf_script.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Bk4700YBI2U9npi-aVXToY8F_CpIrxQu
"""

from cv2 import imread, imwrite, COLOR_BGR2GRAY, COLOR_GRAY2BGR, equalizeHist, cvtColor, resize, INTER_LINEAR, bitwise_and, blur, threshold,THRESH_BINARY
from fastai.learner import load_learner
from numpy import asarray, float32, uint8, zeros
import gradio as gr
from gradio.components import Dropdown
from cv2 import MORPH_ELLIPSE, getStructuringElement, morphologyEx, MORPH_CLOSE
# definir función de ecualización
def histeq (img):
    imgray = cvtColor(img,COLOR_BGR2GRAY)
    imhist = equalizeHist(imgray)
    imhist_rgb = cvtColor(imhist,COLOR_GRAY2BGR)
    return imhist_rgb

def get_msk():
  return True
def acc_camvid():
  return True

def load_model(model_name):
  path_model = model_name + '.pkl'  
  model = load_learner(path_model)  
  return model

def get_mask(img, model_name):
  model = load_model(model_name)
  img1 = histeq(img)
  imwrite('img.tif',img1)
  #cargar imagen de inferencia
  dl = model.dls.test_dl("img.tif")
  #realizar inferencia
  preds = model.get_preds(dl=dl)
  pred_1 = preds[0][0]
  pred_arx = pred_1.argmax(dim=0)
  mask = asarray(pred_arx) 

  # redimensionar la máscara
  m,n,_ = img.shape
  mask_resized = resize(float32(mask),(n, m), interpolation=INTER_LINEAR)
  mask_resized =uint8(mask_resized*255)

   # Transformacion morfologica para eliminar ruido
  # Crea el kernel
  kernel = getStructuringElement(MORPH_ELLIPSE, (15,15))

  # Realiza el cierre morfológico
  mask_resized = morphologyEx(mask_resized , MORPH_CLOSE, kernel) 

  # filtro de media y binarización para reducir el efecto dentado del reescalado
  mask_resized = blur(mask_resized, (5, 5))
  _,mask_resized= threshold(mask_resized, 127, 255, THRESH_BINARY)

  #aplicando mácara de segmentación
  img_masked = bitwise_and(img, img, mask=mask_resized)

  

  return img_masked

model_select = Dropdown(
    choices=["unet_resnet18_epoch10", "resnet34_Dlr"], 
    label="Select model", 
    default="unet_resnet18_epoch10"
)


demo = gr.Interface(fn = get_mask, inputs=['image', model_select], outputs='image')
demo.launch()